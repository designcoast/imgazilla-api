version: '3.8'

services:
  imgazilla-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - imgazilla-redis
      - imgazilla-postgres
    networks:
      - imgazilla-net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=vs0ooog"
      - "traefik.constraint-label=vs0ooog"
      - "traefik.http.routers.imgazilla-app.entryPoints=https"
      - "traefik.http.routers.imgazilla-app.rule=(Host(`figma.imgazilla.app`) && PathPrefix(`/api`))"

#      - "traefik.http.routers.imgazilla-app.middlewares=secured"
#      - "traefik.http.routers.secured.chain.middlewares=route-prefix,cors-rule,test-ratelimit"

      - "traefik.http.middlewares.route-prefix.addprefix.prefix=/api"
      - "traefik.http.routers.imgazilla-app.middlewares=route-prefix@docker"

#      - "traefik.http.middlewares.cors-rule.headers.accesscontrolallowmethods=GET,OPTIONS,POST"
#      - "traefik.http.middlewares.test-ratelimit.ratelimit.average=10"
#      - "traefik.http.middlewares.test-ratelimit.ratelimit.burst=20"

      - "traefik.http.services.imgazilla-app.loadbalancer.server.port=3000"

#      - "traefik.http.routers.block.rule=(Host(`figma.imgazilla.app`) && PathPrefix(`/`))"
#      - "traefik.http.routers.block.service=noop-service"
#      - "traefik.http.routers.block.priority=1"
#      - "traefik.http.routers.block.middlewares=allow-localhost"
#      - "traefik.http.middlewares.allow-localhost.ipwhitelist.sourcerange=127.0.0.1/32"
#      - "traefik.http.services.noop-service.loadbalancer.server.url=http://localhost:65535"


  imgazilla-redis:
    image: redis:latest
    restart: always
    container_name: imgazilla-redis
    command: redis-server --requirepass dev
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    networks:
      - imgazilla-net

  imgazilla-postgres:
    image: postgres:latest
    container_name: imgazilla-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_DATABASE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE_NAME} -U $${POSTGRES_DATABASE_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - imgazilla-net

networks:
  imgazilla-net:

volumes:
  postgres_data:
  redis_data: